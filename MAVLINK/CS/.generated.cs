/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Generated from: tty.xml

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;

    
using System.Reflection;    
    
[assembly: AssemblyTitle("Mavlink Classes")]
[assembly: AssemblyDescription("Generated Message Classes for Mavlink. See http://qgroundcontrol.org/mavlink/start")]
[assembly: AssemblyProduct("Mavlink")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

    namespace MavLink
{

	/// <summary>
	/// 
	/// </summary>
	public enum SYS_TYPE : uint
	{

		/// <summary>
		/// 全系统
		/// </summary>
		SYS_ALL = 0,

		/// <summary>
		/// 无人机
		/// </summary>
		SYS_UAV = 1,

		/// <summary>
		/// 无人船
		/// </summary>
		SYS_USV = 2,

		/// <summary>
		/// 无人车
		/// </summary>
		SYS_UGV = 3,

		/// <summary>
		/// 摇杆
		/// </summary>
		SYS_ROCKER = 254,

		/// <summary>
		/// 地面站
		/// </summary>
		SYS_GSTATION = 255,
		SYS_TYPE_ENUM_END = 256,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum PARAM_TYPE : uint
	{
		PARAM_LIST_REQUEST = 0,
		PARAM_USV_SPEED_P = 1,
		PARAM_USV_SPEED_I = 2,
		PARAM_USV_SPEED_D = 3,
		PARAM_USV_HEADING_P = 4,
		PARAM_USV_HEADING_I = 5,
		PARAM_USV_HEADING_D = 6,
		PARAM_USV_LEFT_RUDDER_MID = 7,
		PARAM_USV_RIGHT_RUDDER_MID = 8,
		PARAM_TYPE_ENUM_END = 9,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum CMD_TYPE : uint
	{
		CMD_UNLOCK = 1,
		CMD_LOCK = 2,
		CMD_AUTO_DRIVE = 3,
		CMD_TYPE_ENUM_END = 4,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum CMD_ACK_FLAG : uint
	{
		CMD_ACK_WRITE_SUCESSED = 1,
		CMD_ACK_WRITE_FAILED = 2,
		CMD_ACK_WRITE_FINISHED = 3,
		CMD_ACK_FLAG_ENUM_END = 4,

	}


}

    
   
namespace MavLink
{

    public abstract class MavlinkMessage
    {
        public abstract int Serialize(byte[] bytes, ref int offset);
    }
	public class Msg_rocker : MavlinkMessage
    {

		/// <summary>
		/// 
		/// </summary>
		public Int16 leftX;

		/// <summary>
		/// 
		/// </summary>
		public Int16 leftY;

		/// <summary>
		/// 
		/// </summary>
		public Int16 rightX;

		/// <summary>
		/// 
		/// </summary>
		public Int16 rightY;

		/// <summary>
		/// 
		/// </summary>
		public Int16 switchA;

		/// <summary>
		/// 
		/// </summary>
		public Int16 switchB;

		/// <summary>
		/// 
		/// </summary>
		public Int16 switchC;

		/// <summary>
		/// 
		/// </summary>
		public Int16 switchD;

		/// <summary>
		/// 
		/// </summary>
		public Int16 switchE;

		/// <summary>
		/// 
		/// </summary>
		public Int16 switchF;

		/// <summary>
		/// 
		/// </summary>
		public Int16 switchG;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ROCKER(this, bytes, ref offset);
            }        
	}

	public class Msg_param_read : MavlinkMessage
    {

		/// <summary>
		/// 参数类型，详见参数定义
		/// </summary>
		public byte param_id;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_READ(this, bytes, ref offset);
            }        
	}

	public class Msg_param_read_ack : MavlinkMessage
    {

		/// <summary>
		/// 参数类型，详见参数定义
		/// </summary>
		public byte param_id;

		/// <summary>
		/// 
		/// </summary>
		public float value;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_READ_ACK(this, bytes, ref offset);
            }        
	}

	public class Msg_param_write : MavlinkMessage
    {

		/// <summary>
		/// 参数类型，详见参数定义
		/// </summary>
		public byte param_id;

		/// <summary>
		/// 
		/// </summary>
		public float value;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_WRITE(this, bytes, ref offset);
            }        
	}

	public class Msg_param_write_ack : MavlinkMessage
    {

		/// <summary>
		/// 参数类型，详见参数定义
		/// </summary>
		public byte param_id;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_WRITE_ACK(this, bytes, ref offset);
            }        
	}

	public class Msg_cmd_write : MavlinkMessage
    {

		/// <summary>
		/// 
		/// </summary>
		public byte SYS_TYPE;

		/// <summary>
		/// 
		/// </summary>
		public byte DEV_ID;

		/// <summary>
		/// 命令类型，详见命令定义
		/// </summary>
		public byte cmd_id;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_CMD_WRITE(this, bytes, ref offset);
            }        
	}

	public class Msg_cmd_ack : MavlinkMessage
    {

		/// <summary>
		/// 命令类型，详见命令定义
		/// </summary>
		public byte cmd_id;

		/// <summary>
		/// 命令应答标志，详见命令应答标志定义
		/// </summary>
		public byte cmd_ack_id;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_CMD_ACK(this, bytes, ref offset);
            }        
	}

	public class Msg_usv_state : MavlinkMessage
    {

		/// <summary>
		/// 
		/// </summary>
		public double longitude;

		/// <summary>
		/// 
		/// </summary>
		public double latitude;

		/// <summary>
		/// 
		/// </summary>
		public float speed;

		/// <summary>
		/// 
		/// </summary>
		public float heading;

		/// <summary>
		/// 
		/// </summary>
		public float Track;

		/// <summary>
		/// 
		/// </summary>
		public float battery_voltage;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_USV_STATE(this, bytes, ref offset);
            }        
	}

	public class Msg_usv_set : MavlinkMessage
    {

		/// <summary>
		/// 
		/// </summary>
		public byte SYS_TYPE;

		/// <summary>
		/// 
		/// </summary>
		public byte DEV_ID;

		/// <summary>
		/// 
		/// </summary>
		public float Speed;

		/// <summary>
		/// 
		/// </summary>
		public float Heading;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_USV_SET(this, bytes, ref offset);
            }        
	}

}

